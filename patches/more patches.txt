 ========= Mora patches added to Android Source.......

 1. core/libcutils/partition_utils.c

	 // joaquim
	#include <errno.h>
	#include <cutils/partition_utils.h>


	// joaquim
	//#ifdef MTK_EMMC_SUPPORT
	int misc_set_phone_encrypt_state(const struct phone_encrypt_state *in) {
	    int dev = -1;
	    char dev_name[32];
	    int count;

	    strcpy(dev_name, "/dev/misc");

	    dev = open(dev_name, O_WRONLY);
	    if (dev < 0)  {
	        printf("Can't open %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }

	    if (lseek(dev, PHONE_ENCRYPT_OFFSET, SEEK_SET) == -1) {
	        printf("Failed seeking %s\n(%s)\n", dev_name, strerror(errno));
	        close(dev);
	        return -1;
	    }

	    count = write(dev, in, sizeof(*in));
	    if (count != sizeof(*in)) {
	        printf("Failed writing %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }
	    if (close(dev) != 0) {
	        printf("Failed closing %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }
	    return 0;
	}

	int misc_get_phone_encrypt_state(struct phone_encrypt_state *in) {

	    int dev = -1;
	    char dev_name[32];
	    int count;

	    strcpy(dev_name, "/dev/misc");

	    dev = open(dev_name, O_RDONLY);
	    if (dev < 0)  {
	        printf("Can't open %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }

	    if (lseek(dev, PHONE_ENCRYPT_OFFSET, SEEK_SET) == -1) {
	        printf("Failed seeking %s\n(%s)\n", dev_name, strerror(errno));
	        close(dev);
	        return -1;
	    }

	    count = read(dev, in, sizeof(*in));
	    if (count != sizeof(*in)) {
	        printf("Failed reading %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }
	    if (close(dev) != 0) {
	        printf("Failed closing %s\n(%s)\n", dev_name, strerror(errno));
	        return -1;
	    }
	    return 0;

	}


	int misc_test(int argc, char **argv)
	{

	    struct phone_encrypt_state ps;

	    if (argc == 1) {

	        misc_get_phone_encrypt_state(&ps);

	        if (ps.state == PHONE_ENCRYPTED) {
	            printf("Phone is encrypted (%x)\n", ps.state);
	        } else {
	            printf("Phone is not encrypted (%x)\n", ps.state);
	        }

	        return 0;
	    }

	    if (atoi(argv[1]) == 0) {
	        ps.state = 0;
	    } else {
	        ps.state = PHONE_ENCRYPTED;
	    }

	    misc_set_phone_encrypt_state(&ps);
	    sync();

	    return 0;
	}
	//#endif


2. core/include/cutils/partition_utils.h


	// joaquim
	//#ifdef MTK_EMMC_SUPPORT
	    #define PHONE_ENCRYPTED (0x4321)
	    #define PHONE_UNCRYPTED (0x0)
	    #define PHONE_ENCRYPT_OFFSET (2048)
	    struct phone_encrypt_state {
	        int state;
	    };

	    int misc_set_phone_encrypt_state(const struct phone_encrypt_state *in);
	    int misc_get_phone_encrypt_state(struct phone_encrypt_state *in);
	//#endif

3. system/core/include/cutils/xlog.h
	// add xlog
	#define XLOG_PRI(priority, tag, ...)         ((void)0)
	#define SXLOG_PRI(priority, tag, ...)        ((void)0)
	#define xlog_printf(priority, tag, ...)      ((void)0)
	#define sxlog_printf(priority, tag, ...)     ((void)0)


4. system/core/include/netutils/ifc.h
	extern int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps); #line 76

5. system/core/libnetutils/ifc_utils.c # no fim
static int ifc_netd_sock_init(void)
{
    int ret;
    const int one = 1;
    struct sockaddr_un netd_addr;
  
    if(ifc_netd_sock == -1){
        ifc_netd_sock = socket(AF_UNIX, SOCK_STREAM, 0);
        if (ifc_netd_sock < 0) {
            printerr("ifc_netd_sock_init: create socket failed");
            return -1;
        }
  
        setsockopt(ifc_netd_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
        memset(&netd_addr, 0, sizeof(netd_addr));
        netd_addr.sun_family = AF_UNIX;
        strlcpy(netd_addr.sun_path, "/dev/socket/netd",
            sizeof(netd_addr.sun_path));
        if (TEMP_FAILURE_RETRY(connect(ifc_netd_sock,
                     (const struct sockaddr*) &netd_addr,
                     sizeof(netd_addr))) != 0) {
            printerr("ifc_netd_sock_init: connect to netd failed, fd=%d, err: %d(%s)", 
                ifc_netd_sock, errno, strerror(errno));
            return -1;
        }
    }
  
    ret = ifc_netd_sock < 0 ? -1 : 0;
    if (DBG) printerr("ifc_netd_sock_init fd=%d, return %d", ifc_netd_sock, ret);
    return ret;
}

static void ifc_netd_sock_close(void)
{
    if (ifc_netd_sock != -1) {
    	if (DBG) printerr("ifc_netd_sock_close fd = %d", ifc_netd_sock);
        (void)close(ifc_netd_sock);
        ifc_netd_sock = -1;
    }
}

/*do not call this function in netd*/
int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps)
{
    FILE* fnetd = NULL;
    int ret = -1;
    int seq = 1;
    char rcv_buf[24];
	int nread = 0;
	
    ALOGD("enter ifc_set_throttle: ifname = %s, rx = %d kbs, tx = %d kbs", ifname, rxKbps, txKbps);

    if(ifc_netd_sock_init() != 0)
        goto exit;
    
    // Send the request.
    fnetd = fdopen(ifc_netd_sock, "r+");
	if(fnetd == NULL){
		ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
		goto exit;
	}
    if (fprintf(fnetd, "%d interface setthrottle %s %d %d", seq, ifname, rxKbps, txKbps) < 0) {
        goto exit;
    }
    // literal NULL byte at end, required by FrameworkListener
    if (fputc(0, fnetd) == EOF ||
        fflush(fnetd) != 0) {
        goto exit;
    }
    ret = 0;

	//Todo: read the whole response from netd
	nread = fread(rcv_buf, 1, 20, fnetd);
	rcv_buf[23] = 0;
	ALOGD("response: %s", rcv_buf);
exit:
    if (fnetd != NULL) {
        fclose(fnetd);
        ifc_netd_sock = -1;
    }
    ifc_netd_sock_close();
  
    return ret;
}


